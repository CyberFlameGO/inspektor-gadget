// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadNetcost returns the embedded CollectionSpec for netcost.
func loadNetcost() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetcostBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load netcost: %w", err)
	}

	return spec, err
}

// loadNetcostObjects loads netcost and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *netcostObjects
//     *netcostPrograms
//     *netcostMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetcostObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNetcost()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// netcostSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netcostSpecs struct {
	netcostProgramSpecs
	netcostMapSpecs
}

// netcostSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netcostProgramSpecs struct {
	BpfProg1 *ebpf.ProgramSpec `ebpf:"bpf_prog1"`
}

// netcostMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netcostMapSpecs struct {
	LpmStats *ebpf.MapSpec `ebpf:"lpm_stats"`
}

// netcostObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetcostObjects or ebpf.CollectionSpec.LoadAndAssign.
type netcostObjects struct {
	netcostPrograms
	netcostMaps
}

func (o *netcostObjects) Close() error {
	return _NetcostClose(
		&o.netcostPrograms,
		&o.netcostMaps,
	)
}

// netcostMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetcostObjects or ebpf.CollectionSpec.LoadAndAssign.
type netcostMaps struct {
	LpmStats *ebpf.Map `ebpf:"lpm_stats"`
}

func (m *netcostMaps) Close() error {
	return _NetcostClose(
		m.LpmStats,
	)
}

// netcostPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetcostObjects or ebpf.CollectionSpec.LoadAndAssign.
type netcostPrograms struct {
	BpfProg1 *ebpf.Program `ebpf:"bpf_prog1"`
}

func (p *netcostPrograms) Close() error {
	return _NetcostClose(
		p.BpfProg1,
	)
}

func _NetcostClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed netcost_bpfel.o
var _NetcostBytes []byte
